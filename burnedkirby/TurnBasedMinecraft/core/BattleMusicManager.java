package burnedkirby.TurnBasedMinecraft.core;

import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.Random;
import java.util.Vector;

import net.minecraft.client.Minecraft;
import burnedkirby.TurnBasedMinecraft.ModMain;

public class BattleMusicManager {
	
	protected static final String battleMusicFolder = ModMain.modFolder + "/BattleMusic";
	protected static final String sillyMusicFolder = ModMain.modFolder + "/SillyBattleMusic";

	protected Random random;
	
	protected Vector<File> musicFiles = null;
	protected Vector<File> sillyFiles = null;
	
	protected boolean battleMusicPlaying;
	
	protected BattleMusicPlayer battleMusicPlayer = null;
	
	public BattleMusicManager()
	{
		battleMusicPlaying = false;
		
		battleMusicPlayer = new BattleMusicPlayer();
		
		File musicFolder = new File(battleMusicFolder);
		
		File sillyMusicFolder = new File(this.sillyMusicFolder);

		if(!musicFolder.exists())
		{
			if(!musicFolder.mkdir())
			{
				new IOException("Failed to create battle music directory.").printStackTrace();
				return;
			}
			try {
				FileWriter readme = new FileWriter(battleMusicFolder + "/README");
				readme.write("This folder and this file was auto-generated by the TurnBasedMinecraft mod!" +
						"\nPlace .wav files in here to be used as battle music!" +
						"\nPlace .wav files in the silly folder for different music when fighting passive mobs!" +
						"\n\nIf there are no music files here, then the mod will not halt any music playing by Minecraft.");
				readme.close();
			} catch(IOException e) {}
		}
		
		if(!sillyMusicFolder.exists())
		{
			if(!sillyMusicFolder.mkdir())
			{
				new IOException("Failed to create silly battle music directory.").printStackTrace();
				return;
			}
		}
		
		File[] musicFiles = musicFolder.listFiles(new FilenameFilter() {
			
			@Override
			public boolean accept(File dir, String name) {
				int ext;
				if((ext = name.lastIndexOf(".")) == -1)
					return false;
				String extension = name.substring(ext + 1);
				if(extension.equals("ogg") || extension.equals("wav"))
					return true;
				return false;
			}
		});

		File[] sillyMusicFiles = sillyMusicFolder.listFiles(new FilenameFilter() {
			
			@Override
			public boolean accept(File dir, String name) {
				int ext;
				if((ext = name.lastIndexOf(".")) == -1)
					return false;
				String extension = name.substring(ext + 1);
				if(extension.equals("ogg") || extension.equals("wav"))
					return true;
				return false;
			}
		});
		
		if(musicFiles.length == 0)
			this.musicFiles = null;
		else
		{
			this.musicFiles = new Vector<File>(musicFiles.length);
			for(File music : musicFiles)
				this.musicFiles.add(music);
		}
		
		if(sillyMusicFiles.length == 0)
			this.sillyFiles = null;
		else
		{
			this.sillyFiles = new Vector<File>(sillyMusicFiles.length);
			for(File music : sillyMusicFiles)
				this.sillyFiles.add(music);
		}
		
		random = new Random(System.currentTimeMillis());
	}
	
	public boolean isPlaying()
	{
		return battleMusicPlaying;
	}
	
	public void playRandomBattleMusic()
	{
		synchronized(this)
		{
			if(musicFiles != null && !battleMusicPlaying)
			{
				Minecraft.getMinecraft().getSoundHandler().pauseSounds();
				Utility.log("ATTEMPTING TO PLAY MUSIC");
				if(battleMusicPlayer.loadWav(getRandomMusicFile()) != 0)
				{
					Utility.log("WARNING: Failed to load WAV music file!");
					return;
				}
				if(battleMusicPlayer.playWav(true) != 0)
				{
					Utility.log("WARNING: Failed to play music!");
					return;
				}
				
				battleMusicPlaying = true;
			}
		}
	}
	
	public void playRandomSillyMusic()
	{
		boolean failed = true;
		synchronized(this)
		{
			if(sillyFiles != null && !battleMusicPlaying)
			{
				Minecraft.getMinecraft().getSoundHandler().pauseSounds();
				Utility.log("ATTEMPTING TO PLAY MUSIC");
				if(battleMusicPlayer.loadWav(getRandomSillyMusicFile()) != 0)
				{
					Utility.log("WARNING: Failed to load WAV silly music file!");
					return;
				}
				if(battleMusicPlayer.playWav(true) != 0)
				{
					Utility.log("WARNING: Failed to play silly music!");
					return;
				}
				
				battleMusicPlaying = true;
				failed = false;
			}
		}
		
		if(failed)
			playRandomBattleMusic();
	}
	
	public void stopBattleMusic()
	{
		if(battleMusicPlaying)
		{
			if(battleMusicPlayer.stop(false) != 0)
			{
				Utility.log("WARNING: Failed to stop music!");
			}
			battleMusicPlaying = false;
		}
	}
	
	private File getRandomMusicFile()
	{
		return musicFiles.get(random.nextInt(musicFiles.size()));
	}

	private File getRandomSillyMusicFile()
	{
		return sillyFiles.get(random.nextInt(sillyFiles.size()));
	}
	
	public void destroy()
	{
		battleMusicPlayer.destroy();
	}
}
